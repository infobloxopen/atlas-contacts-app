apiVersion: v1
kind: Service
metadata:
  name: contacts-app
  namespace: contacts
  labels:
    app: contacts-app
spec:
  type: NodePort
  ports:
    - name: http
      port: 8080
      protocol: TCP
      nodePort: 31500
  selector:
    app: contacts-app
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  namespace: contacts
  name: contacts-app-ingress
  annotations:
    ingress.kubernetes.io/auth-url: http://authn-stub.atlas-stubs.svc.cluster.local/auth
    ingress.kubernetes.io/auth-response-headers: Grpc-Metadata-Authorization
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - http:
      paths:
      - path: /atlas-contacts-app
        backend:
          serviceName: contacts-app
          servicePort: 8080
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: contacts-app
  namespace: contacts
  labels:
    app: contacts-app
spec:
  selector:
    matchLabels:
      app: contacts-app
  replicas: 1
  template:
    metadata:
      labels:
        app: contacts-app
    spec:
      containers:
      - name: server
        args:
        - "-db"
        - "host=postgres port=5432 user=postgres password=postgres sslmode=disable dbname=contacts"
        - "-log"
        - "debug"
        # uncomment to add authorization to the contacts-app example. Please
        # note that authz also needs to be running in order to authorize
        # requests to the contacts-app
        # - "-authz=pdpserver.authz:5555"
        image: infoblox/contacts-server:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          protocol: TCP
        - containerPort: 8081
          protocol: TCP
        - containerPort: 9090
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 8081
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 10
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: contacts
  labels:
    app: postgres
spec:
  ports:
    - port: 5432
  selector:
    app: api-example
    tier: postgres
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: postgres
  namespace: contacts
  labels:
    app: api-example
spec:
  selector:
    matchLabels:
      app: api-example
      tier: postgres
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: api-example
        tier: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:9.4
        env:
        - name: POSTGRES_USER
          value: postgres
        - name: POSTGRES_PASSWORD
          value: postgres
        - name: POSTGRES_DB
          value: contacts
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        ports:
          - containerPort: 5432
        livenessProbe:
          exec:
            command:
            - "/bin/sh"
            - "-i"
            - "-c"
            - "pg_isready -h 127.0.0.1 -p 5432 -U $POSTGRES_USER"
          initialDelaySeconds: 20
          timeoutSeconds: 1
          successThreshold: 1
          failureThreshold: 10
        readinessProbe:
          timeoutSeconds: 1
          initialDelaySeconds: 5
          successThreshold: 1
          failureThreshold: 10
          exec:
            command:
            - "/bin/sh"
            - "-i"
            - "-c"
            - "psql -h 127.0.0.1 -U $POSTGRES_USER -q -d $POSTGRES_PASSWORD -c 'SELECT 1'"
