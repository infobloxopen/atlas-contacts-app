// Code generated by protoc-gen-validate
// source: github.com/infobloxopen/atlas-contacts-app/proto/contacts.proto
// DO NOT EDIT!!!

package contacts

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// Validate checks the field values on Contact with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Contact) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for FirstName

	// no validation rules for MiddleName

	// no validation rules for LastName

	if err := m._validateEmail(m.GetEmailAddress()); err != nil {
		return ContactValidationError{
			Field:  "EmailAddress",
			Reason: "value must be a valid email address",
			Cause:  err,
		}
	}

	return nil
}

func (m *Contact) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *Contact) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// ContactValidationError is the validation error returned by Contact.Validate
// if the designated constraints aren't met.
type ContactValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e ContactValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContact.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = ContactValidationError{}

// Validate checks the field values on CreateContactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateContactRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return CreateContactRequestValidationError{
				Field:  "Payload",
				Reason: "embedded message failed validation",
				Cause:  err,
			}
		}
	}

	return nil
}

// CreateContactRequestValidationError is the validation error returned by
// CreateContactRequest.Validate if the designated constraints aren't met.
type CreateContactRequestValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e CreateContactRequestValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateContactRequest.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = CreateContactRequestValidationError{}

// Validate checks the field values on CreateContactResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateContactResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return CreateContactResponseValidationError{
				Field:  "Result",
				Reason: "embedded message failed validation",
				Cause:  err,
			}
		}
	}

	return nil
}

// CreateContactResponseValidationError is the validation error returned by
// CreateContactResponse.Validate if the designated constraints aren't met.
type CreateContactResponseValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e CreateContactResponseValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateContactResponse.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = CreateContactResponseValidationError{}

// Validate checks the field values on GetContactRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetContactRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetContactRequestValidationError is the validation error returned by
// GetContactRequest.Validate if the designated constraints aren't met.
type GetContactRequestValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e GetContactRequestValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContactRequest.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = GetContactRequestValidationError{}

// Validate checks the field values on GetContactResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetContactResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return GetContactResponseValidationError{
				Field:  "Result",
				Reason: "embedded message failed validation",
				Cause:  err,
			}
		}
	}

	return nil
}

// GetContactResponseValidationError is the validation error returned by
// GetContactResponse.Validate if the designated constraints aren't met.
type GetContactResponseValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e GetContactResponseValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetContactResponse.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = GetContactResponseValidationError{}

// Validate checks the field values on UpdateContactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateContactRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPayload()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return UpdateContactRequestValidationError{
				Field:  "Payload",
				Reason: "embedded message failed validation",
				Cause:  err,
			}
		}
	}

	return nil
}

// UpdateContactRequestValidationError is the validation error returned by
// UpdateContactRequest.Validate if the designated constraints aren't met.
type UpdateContactRequestValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e UpdateContactRequestValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateContactRequest.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = UpdateContactRequestValidationError{}

// Validate checks the field values on UpdateContactResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateContactResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetResult()).(interface {
		Validate() error
	}); ok {
		if err := v.Validate(); err != nil {
			return UpdateContactResponseValidationError{
				Field:  "Result",
				Reason: "embedded message failed validation",
				Cause:  err,
			}
		}
	}

	return nil
}

// UpdateContactResponseValidationError is the validation error returned by
// UpdateContactResponse.Validate if the designated constraints aren't met.
type UpdateContactResponseValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e UpdateContactResponseValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateContactResponse.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = UpdateContactResponseValidationError{}

// Validate checks the field values on DeleteContactRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteContactRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteContactRequestValidationError is the validation error returned by
// DeleteContactRequest.Validate if the designated constraints aren't met.
type DeleteContactRequestValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e DeleteContactRequestValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteContactRequest.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = DeleteContactRequestValidationError{}

// Validate checks the field values on ListContactsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListContactsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface {
			Validate() error
		}); ok {
			if err := v.Validate(); err != nil {
				return ListContactsResponseValidationError{
					Field:  fmt.Sprintf("Results[%v]", idx),
					Reason: "embedded message failed validation",
					Cause:  err,
				}
			}
		}

	}

	return nil
}

// ListContactsResponseValidationError is the validation error returned by
// ListContactsResponse.Validate if the designated constraints aren't met.
type ListContactsResponseValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e ListContactsResponseValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContactsResponse.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = ListContactsResponseValidationError{}

// Validate checks the field values on SMSRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SMSRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Message

	return nil
}

// SMSRequestValidationError is the validation error returned by
// SMSRequest.Validate if the designated constraints aren't met.
type SMSRequestValidationError struct {
	Field  string
	Reason string
	Cause  error
	Key    bool
}

// Error satisfies the builtin error interface
func (e SMSRequestValidationError) Error() string {
	cause := ""
	if e.Cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.Cause)
	}

	key := ""
	if e.Key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSMSRequest.%s: %s%s",
		key,
		e.Field,
		e.Reason,
		cause)
}

var _ error = SMSRequestValidationError{}
